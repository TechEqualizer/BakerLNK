// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String   @id @default(cuid())
  email        String   @unique
  passwordHash String   @map("password_hash")
  name         String
  role         String   @default("baker")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  baker               Baker?
  galleryInquiries    GalleryInquiry[]
  uploadedFiles       File[]

  @@map("users")
}

model Baker {
  id               String   @id @default(cuid())
  userId           String   @unique @map("user_id")
  businessName     String   @map("business_name")
  tagline          String?
  logoUrl          String?  @map("logo_url")
  heroImageUrl     String?  @map("hero_image_url")
  selectedThemeId  String?  @map("selected_theme_id")
  leadTimeDays     Int      @default(7) @map("lead_time_days")
  createdAt        DateTime @default(now()) @map("created_at")
  updatedAt        DateTime @updatedAt @map("updated_at")

  user       User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  theme      Theme?       @relation(fields: [selectedThemeId], references: [id])
  customers  Customer[]
  orders     Order[]
  gallery    Gallery[]
  messages   Message[]

  @@map("bakers")
}

model Customer {
  id        String   @id @default(cuid())
  bakerId   String   @map("baker_id")
  name      String
  email     String?
  phone     String?
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  baker    Baker     @relation(fields: [bakerId], references: [id], onDelete: Cascade)
  orders   Order[]
  messages Message[]

  @@map("customers")
}

model Order {
  id               String    @id @default(cuid())
  bakerId          String    @map("baker_id")
  customerId       String    @map("customer_id")
  status           String    @default("inquiry")
  eventDate        DateTime? @map("event_date") @db.Date
  eventType        String?   @map("event_type")
  servesCount      Int?      @map("serves_count")
  budgetMin        Decimal?  @map("budget_min") @db.Decimal(10, 2)
  budgetMax        Decimal?  @map("budget_max") @db.Decimal(10, 2)
  cakeDescription  String?   @map("cake_description")
  specialRequests  String?   @map("special_requests")
  quotedPrice      Decimal?  @map("quoted_price") @db.Decimal(10, 2)
  depositAmount    Decimal?  @map("deposit_amount") @db.Decimal(10, 2)
  depositPaid      Boolean   @default(false) @map("deposit_paid")
  bakerNotes       String?   @map("baker_notes")
  priority         String    @default("medium")
  pickupDelivery   String?   @map("pickup_delivery")
  createdAt        DateTime  @default(now()) @map("created_at")
  updatedAt        DateTime  @updatedAt @map("updated_at")

  baker    Baker    @relation(fields: [bakerId], references: [id], onDelete: Cascade)
  customer Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)

  @@map("orders")
}

model Gallery {
  id               String   @id @default(cuid())
  bakerId          String   @map("baker_id")
  title            String
  description      String?
  imageUrl         String   @map("image_url")
  category         String?
  tags             String[]
  featured         Boolean  @default(false)
  priceRange       String?  @map("price_range")
  servesCount      Int?     @map("serves_count")
  heartsCount      Int      @default(0) @map("hearts_count")
  inquiriesCount   Int      @default(0) @map("inquiries_count")
  createdAt        DateTime @default(now()) @map("created_at")
  updatedAt        DateTime @updatedAt @map("updated_at")

  baker             Baker            @relation(fields: [bakerId], references: [id], onDelete: Cascade)
  galleryInquiries  GalleryInquiry[]

  @@map("gallery")
}

model Theme {
  id                    String   @id @default(cuid())
  themeName             String   @map("theme_name")
  description           String?
  category              String   @default("modern")
  cssVariables          String?  @map("css_variables")  // Legacy field for backwards compatibility
  lightModeVariables    String?  @map("light_mode_variables")
  darkModeVariables     String?  @map("dark_mode_variables")
  backgroundTextureUrl  String?  @map("background_texture_url")
  isActive              Boolean  @default(true) @map("is_active")
  createdAt             DateTime @default(now()) @map("created_at")
  updatedAt             DateTime @updatedAt @map("updated_at")

  bakers Baker[]

  @@map("themes")
}

model Message {
  id         String    @id @default(cuid())
  bakerId    String    @map("baker_id")
  customerId String    @map("customer_id")
  content    String
  senderType String    @map("sender_type") // 'baker' or 'customer'
  readAt     DateTime? @map("read_at")
  createdAt  DateTime  @default(now()) @map("created_at")

  baker    Baker    @relation(fields: [bakerId], references: [id], onDelete: Cascade)
  customer Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)

  @@map("messages")
}

model GalleryInquiry {
  id            String   @id @default(cuid())
  userId        String   @map("user_id")
  galleryItemId String   @map("gallery_item_id")
  createdDate   DateTime @default(now()) @map("created_date")

  user        User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  galleryItem Gallery @relation(fields: [galleryItemId], references: [id], onDelete: Cascade)

  @@unique([userId, galleryItemId, createdDate])
  @@map("gallery_inquiries")
}

model File {
  id           String   @id @default(cuid())
  filename     String
  originalName String   @map("original_name")
  mimeType     String   @map("mime_type")
  sizeBytes    BigInt   @map("size_bytes")
  filePath     String   @map("file_path")
  uploadedBy   String?  @map("uploaded_by")
  createdAt    DateTime @default(now()) @map("created_at")

  uploader User? @relation(fields: [uploadedBy], references: [id])

  @@map("files")
}